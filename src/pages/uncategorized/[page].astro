---
import type { GetStaticPaths, Page } from "astro";
import BaseLayout from "../../layouts/BaseLayout.astro";

// export const prerender = true;

// Check if user is logged in
const isLoggedIn = Astro.cookies.get('isLoggedIn')?.value === 'true';

// If not logged in, redirect to login page
if (!isLoggedIn) {
  return Astro.redirect('/login');
}

interface BlogPost {
    file: string;
    frontmatter: {
        title: string;
        description: string;
        publishDate: string;
    };
}

interface Props {
    page: Page<BlogPost>;
}

const allPosts = await Astro.glob("../../data/blog-posts/uncategorized/*.{md,mdx}");
const sortedPosts = allPosts.sort(
    (a, b) =>
        new Date(b.frontmatter.publishDate).valueOf() -
        new Date(a.frontmatter.publishDate).valueOf(),
);

// Get the current page from URL params
const currentPage = parseInt(Astro.params.page || "1");
const postsPerPage = 10;
const start = (currentPage - 1) * postsPerPage;
const end = start + postsPerPage;
const paginatedPosts = sortedPosts.slice(start, end);

// Calculate total pages
const totalPages = Math.ceil(sortedPosts.length / postsPerPage);

// Create page object
const page = {
    data: paginatedPosts,
    start,
    end,
    size: postsPerPage,
    total: sortedPosts.length,
    currentPage,
    lastPage: totalPages,
    url: {
        prev: currentPage > 1 ? `/uncategorized/${currentPage - 1}` : undefined,
        next: currentPage < totalPages ? `/uncategorized/${currentPage + 1}` : undefined
    }
};

// Ensure page exists before proceeding
if (currentPage > totalPages) {
    return Astro.redirect('/404');
}

const title = "Uncategorized - Al Harkan";
const description = "Uncategorized Posts by Al Harkan";
const permalink = Astro.site?.href ? `${Astro.site.href}uncategorized` : "/uncategorized";
---

<BaseLayout
    title={title}
    description={description}
    permalink={permalink ?? "/"}
    current="uncategorized"
>
    <div class="container">
        <h1>Uncategorized</h1>
        <hr />
        {
            page.data.map((post, index) => {
                const href = `/${post.file.split("/uncategorized/").pop()?.split(".").shift()}`;
                return (
                    <div>
                        {index !== 0 && <hr />}
                        <div class="post-item">
                            <h2>
                                <a href={href}>{post.frontmatter.title}</a>
                            </h2>
                            <p>{post.frontmatter.description}</p>
                            <div class="post-item-footer">
                                <span class="post-item-date">
                                    — {post.frontmatter.publishDate}
                                </span>
                            </div>
                        </div>
                    </div>
                );
            })
        }

        <div class="pagination">
            {
                page.url.prev && (
                    <a href={page.url.prev} class="pagination-prev">
                        ← Previous
                    </a>
                )
            }
            {
                page.url.next && (
                    <a href={page.url.next} class="pagination-next">
                        Next →
                    </a>
                )
            }
        </div>
    </div>

    <style>
        h1 {
            margin-bottom: 0.5rem;
        }

        h2,
        .post-item-footer {
            font-family: var(--font-family-sans);
            font-weight: 700;
        }

        .post-item-date {
            color: var(--text-secondary);
            text-align: left;
            text-transform: uppercase;
            margin-right: 16px;
        }

        hr {
            margin: 60px auto;
        }

        .pagination {
            display: flex;
            justify-content: space-between;
            margin-top: 60px;
            /* padding: 1rem 0; */
        }

        .pagination-prev,
        .pagination-next {
            /* padding: 0.5rem 1rem; */
            /* border: 1px solid var(--text-secondary); */
            /* border-radius: 4px; */
            /* text-decoration: none; */
          color: var(--text-secondary);
            transition: all 0.2s ease;
            font-family: var(--font-family-sans);
            font-size: 1.8em;
            font-weight: 700;
            text-decoration: none;
            box-shadow: inset 0 -0.12em 0 var(--primary-color);
            -webkit-transition:
                box-shadow 0.2s ease-in-out,
                color 0.2s ease-in-out;
            transition:
                box-shadow 0.2s ease-in-out,
                color 0.2s ease-in-out;
        }

        .pagination-prev:hover,
        .pagination-next:hover {
            /* border-color: var(--text-primary); */
            /* background-color: var(--text-primary); */
            /* color: var(--background); */
            color: var(--primary-color);
            box-shadow: inset 0 -1.5em 0 var(--primary-color);
            color: #fff;
        }

        .pagination-next {
            margin-left: auto;
        }
    </style>
</BaseLayout>
