---
import BaseLayout from "../layouts/BaseLayout.astro";
import Bio from "../components/Bio.astro";
import getPostData from "../utils/getPostData";
import { findRedirect } from "../utils/redirectHandler";

export async function getStaticPaths() {
  const blogPosts:any = await Astro.glob("../data/blog-posts/blog/*.{md,mdx}");
  const storyPosts:any = await Astro.glob("../data/blog-posts/stories/*.{md,mdx}");
  const threadPosts:any = await Astro.glob("../data/blog-posts/threads/*.{md,mdx}");
  const workPosts:any = await Astro.glob("../data/blog-posts/works/*.{md,mdx}");
  const uncategorizedPosts:any = await Astro.glob("../data/blog-posts/uncategorized/*.{md,mdx}");
  const allPosts = [
    ...blogPosts,
    ...storyPosts,
    ...threadPosts,
    ...workPosts,
    ...uncategorizedPosts,
  ];

  // Add debug logging
  // console.log(
  //   "Generated paths:",
  //   allPosts.map((p) => ({
  //     slug: p.file.split("/").pop().split(".").shift(),
  //     file: p.file,
  //   })),
  // );

  return allPosts.map((p) => ({
    params: { slug: p.file.split("/").pop().split(".").shift() },
    props: { post: p },
  }));
}

const { slug } = Astro.params;
const { Content, frontmatter } = Astro.props.post;

// Check for redirection
const redirectMatch = findRedirect(slug);

// If a redirect is found, use Astro's redirect method
if (redirectMatch) {
  return Astro.redirect(redirectMatch.destination);
}

const { title, description, publishDate } = frontmatter;
const { slug: postSlug, readingTime } = getPostData(Astro.props.post);
const permalink = `${Astro?.site?.href}${postSlug}`;

// Check if this is a blog post or other category
const possiblePaths = ["blog", "stories", "threads", "uncategorized", "works"];
const isBlogPost = possiblePaths.some((path) =>
  Astro.props.post.file.includes(`blog-posts/${path}`),
);

const category = isBlogPost 
  ? Astro.props.post.file.split('blog-posts/')[1].split('/')[0]
  : '';

---

<BaseLayout
  title={title}
  description={description}
  permalink={permalink}
  current={isBlogPost ? "blog" : ""}
>
  <header>
    <!-- <p>{publishDate} ~ {readingTime}</p> -->
    <p>
  <a href={category === "blog" ? "/" : `/${category}`}>
    {category === "blog" ? "featured" : `#${category}`}
  </a>
  ~ {publishDate}
</p>
    <h1>{title}</h1>
    <hr />
  </header>
  <div class="container">
    <article class="content">
      <Content />
    </article>
    <hr />
    <Bio />
  </div>
</BaseLayout>

<style>
  header {
    text-align: center;
  }

  header h1 {
    margin-bottom: 0.7em;
  }

  header p {
    color: var(--text-secondary);
    text-transform: uppercase;
    font-family: var(--font-family-sans);
    font-weight: 600;
  }

  header hr {
    min-width: 100px;
    width: 30%;
  }
</style>
