---
import ThemeToggleButton from "./ThemeToggleButton.svelte";
const { current = "" } = Astro.props;
---

<style>
  .nav-container {
    position: relative;
    margin: 0 auto;
    max-width: 42em;
    width: 100%;
    display: flex;
    justify-content: space-between;
    align-items: center;
    overflow-x: auto; /* Add horizontal scroll */
    -webkit-overflow-scrolling: touch; /* Smooth scroll on iOS */
    scrollbar-width: none; /* Hide scrollbar Firefox */
    -ms-overflow-style: none; /* Hide scrollbar IE/Edge */
  }

  /* Hide scrollbar for Chrome/Safari/Opera */
  .nav-container::-webkit-scrollbar {
    display: none;
  }

  nav {
    display: flex;
    align-items: center;
    font-family: var(--font-family-sans);
    font-weight: 700;
    text-transform: uppercase;
    gap: 0.5rem;
    padding: 0; /* Add horizontal padding */
    flex-wrap: nowrap; /* Prevent wrapping */
    min-width: min-content; /* Ensure nav takes minimum required width */
  }

  .theme-toggle-container {
    display: flex;
    align-items: center;
    font-family: var(--font-family-sans);
    font-weight: 700;
    text-transform: uppercase;
  }

  a {
    color: inherit;
    text-decoration: none;
    padding: 7px 10px;
    display: block;
    position: relative;
    /* min-width: 90px; */
    text-align: left;
    margin: 5px 0;
  }

  a:not(.selected) {
    opacity: 1;
  }

  a::before {
    content: "";
    position: absolute;
    transition: transform 0.3s ease;
    left: 0;
    bottom: 0;
    width: 100%;
    height: 2px;
    background: var(--text-secondary);
    transform: scaleX(0);
  }

  a:hover::before,
  .selected::before {
    transform: scaleX(1);
  }

  .selected::before {
  }

  @media screen and (max-width: 480px) {
    .nav-container {
      max-width: 100%;
      padding: 0;
      justify-content: flex-start; /* Align content to start on mobile */
    }

    .theme-toggle-container {
      position: sticky; /* Keep theme toggle visible */
      right: 0;
      padding-left: 0;
      margin-left: auto;
      justify-content: flex-end;
      background: var(--background-body);
    }
  }

  .dropdown-container {
    position: relative;
    display: inline-block;
  }

  .dropdown-container:has(.dropdown-content.show) {
    position: static;
  }

  .dropdown-button {
    cursor: pointer;
  }

  .dropdown-content {
    display: none;
    position: fixed;
    z-index: 999;
    background-color: var(--background-body, #ffffff);
    min-width: unset;
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
    border-radius: 4px;
  }

  .dropdown-content a {
    color: var(--text-main, #000000);
    padding: 7px 10px;
    text-align: left;
    min-width: unset;
  }

  .dropdown-content a:hover {
    background-color: var(--background-body, #f5f5f5);
  }

  .dropdown-container:hover .dropdown-content {
    display: block;
  }

  .dropdown-container:hover .dropdown-button {
  }

  .dropdown-container.dropdown-active .dropdown-content {
    display: block;
  }

  .dropdown-content.show {
    display: block;
  }

  /* On desktop, still use hover */
  @media (hover: hover) {
    .dropdown-container:hover .dropdown-content {
      display: block;
    }
  }

  [data-dropdown-toggle] {
    cursor: pointer;
  }

  .highlight-link {
    color: var(--primary-color) !important;
  }
</style>

<div class="nav-container">
  <nav>
    <a class={current === "" ? "selected" : ""} href="/">home</a>
    <a class={current === "threads" ? "selected" : ""} href="/threads"
      >threads</a
    >

    <div class="dropdown-container">
      <a
        class={current === "shorts" ||
        current === "stories" ||
        current === "works" ||
        current === "search" ||
        current === "bookmarks" ||
        current === "uncategorized"
          ? "selected"
          : ""}
        data-dropdown-toggle
        role="button"
        tabindex="0"
        class="dropdown-button">Others</a
      >
      <div class="dropdown-content">
        <a href="/shorts">Shorts</a>
        <a href="/stories">Stories</a>
        <a href="/works">Works</a>
        <a href="/bookmarks">Bookmarks</a>
        <!-- <a href="/uncategorized">Uncategorized</a> -->
        <a href="/search">Search</a>
      </div>
    </div>

    <div class="dropdown-container">
      <a
        class={current === "links" ||
        current === "profile"
? "selected" : ""}
        data-dropdown-toggle
        role="button"
        tabindex="0"
        class="dropdown-button">Links</a
      >
      <div class="dropdown-content">
        <a href="https://x.com/alhrkn" 
        target="_blank" 
        rel="noopener noreferrer"
          >Twitter</a
        >
        <a href="https://alhrkn.vercel.app" 
        target="_blank" 
        class="highlight-link"
        rel="noopener noreferrer"
          >Apps</a
        >
        <!-- <a
          href="https://instagram.com/alhrkn"
          target="_blank"
          rel="noopener noreferrer">Instagram</a
        > -->
        <a
          href="https://enaiblr.org/apps"
          target="_blank"
          rel="noopener noreferrer"
          >Enaiblr</a
        >
        <!-- <a
          href="https://linkedin.com/in/alharkan"
          target="_blank"
          rel="noopener noreferrer">LinkedIn</a
        > -->
        <a href="/about">Profile</a>
        <!-- <a
        href="/logout">Logout</a
      > -->
        <!-- <a
          href="https://github.com/alharkan7"
          target="_blank"
          rel="noopener noreferrer">GitHub</a
        > -->
      </div>
    </div>

    <!-- <a class={current === "bookmarks" ? "selected" : ""} href="/bookmarks">bookmarks</a> -->
  </nav>

  <div class="theme-toggle-container">
    <ThemeToggleButton client:load />
  </div>
</div>

<script>
  const dropdownToggle = document.querySelector("[data-dropdown-toggle]");
  if (dropdownToggle) {
    dropdownToggle.addEventListener("click", (e) => {
      e.preventDefault();
      const target = e.currentTarget as HTMLElement;
      const dropdownContent = target.nextElementSibling as HTMLElement | null;
      dropdownContent?.classList.toggle("show");
    });
  }

  document.addEventListener("DOMContentLoaded", () => {
    const dropdownContainers = document.querySelectorAll(".dropdown-container");

    dropdownContainers.forEach((container) => {
      const button = container.querySelector("[data-dropdown-toggle]");
      const content = container.querySelector(".dropdown-content");

      if (button && content) {
        button.addEventListener("click", () => {
          // Type assertions to HTMLElement
          const buttonEl = button as HTMLElement;
          const contentEl = content as HTMLElement;

          // Position the dropdown under the button
          const buttonRect = buttonEl.getBoundingClientRect();
          contentEl.style.top = `${buttonRect.bottom}px`;
          contentEl.style.left = `${buttonRect.left}px`;
          contentEl.style.transform = "none";
        });
      }
    });
  });

  document.addEventListener("DOMContentLoaded", () => {
    const dropdownToggles = document.querySelectorAll("[data-dropdown-toggle]");
    let activeDropdown: Element | null = null;

    dropdownToggles.forEach((toggle) => {
      toggle.addEventListener("click", (e) => {
        e.preventDefault();
        const container = (e.currentTarget as Element).closest(
          ".dropdown-container",
        );
        if (!container) return;

        const dropdownContent = container.querySelector(".dropdown-content");
        if (!dropdownContent) return;

        // Close previously opened dropdown if clicking a different one
        if (activeDropdown && activeDropdown !== dropdownContent) {
          activeDropdown.classList.remove("show");
        }

        // Toggle current dropdown
        dropdownContent.classList.toggle("show");
        activeDropdown = dropdownContent;
      });
    });

    // Close dropdown when clicking outside
    document.addEventListener("click", (e) => {
      const target = e.target as Element;
      if (!target.closest(".dropdown-container")) {
        if (activeDropdown) {
          activeDropdown.classList.remove("show");
          activeDropdown = null;
        }
      }
    });
  });
</script>
