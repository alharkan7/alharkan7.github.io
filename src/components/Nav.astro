---
import ThemeToggleButton from "./ThemeToggleButton.svelte";
const { current = "" } = Astro.props;
---

<style>
  nav {
    align-items: center;
    display: flex;
    flex: 1;
    font-family: var(--font-family-sans);
    font-weight: 700;
    justify-content: flex-start;
    text-transform: uppercase;
  }

  a {
    color: inherit;
    text-decoration: none;
    padding: 10px 5px;
    display: block;
    position: relative;
    min-width: 90px;
    text-align: center;
    margin: 5px;
  }

  a:not(.selected) {
    opacity: 1;
  }

  a::before {
    content: "";
    position: absolute;
    transition: transform 0.3s ease;
    left: 0;
    bottom: 0;
    width: 100%;
    height: 2px;
    background: var(--text-secondary);
    transform: scaleX(0);
  }

  a:hover::before,
  .selected::before {
    transform: scaleX(1);
  }

  .selected::before {
  }

  .theme-toggle-container {
    color: inherit;
    text-decoration: none;
    padding: 10px 5px;
    display: block;
    position: relative;
    text-align: center;
  }

  @media screen and (max-width: 520px) {
    .theme-toggle-container {
      margin-right: 1em;
    }
  }

  .dropdown-container {
    position: relative;
    display: inline-block;
  }

  .dropdown-button {
    cursor: pointer;
  }

  .dropdown-content {
    display: none;
    position: absolute;
    z-index: 1;
    background-color: var(--background-body, #ffffff);
    min-width: unset;
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
    border-radius: 4px;
  }

  .dropdown-content a {
    color: var(--text-main, #000000);
    padding: 8px 16px;
    text-align: left;
    min-width: unset;
  }

  .dropdown-content a:hover {
    background-color: var(--background-body, #f5f5f5);
  }

  .dropdown-container:hover .dropdown-content {
    display: block;
  }

  .dropdown-container:hover .dropdown-button {
  }

  .dropdown-container.dropdown-active .dropdown-content {
    display: block;
  }

  .dropdown-content.show {
    display: block;
  }

  /* On desktop, still use hover */
  @media (hover: hover) {
    .dropdown-container:hover .dropdown-content {
      display: block;
    }
  }
</style>

<nav>
  <a class={current === "" ? "selected" : ""} href="/">home</a>

  <div class="dropdown-container">
    <a
      class={current === "social" ? "selected" : ""}
      data-dropdown-toggle>Social</a
    >
    <div class="dropdown-content">
      <a
      class={current === "social" ? "selected" : ""}
      href="/about"
        >Bio</a
      >
      <a href="https://x.com/alhrkn" target="_blank" rel="noopener noreferrer"
        >Twitter</a
      >
      <a
        href="https://instagram.com/alhrkn"
        target="_blank"
        rel="noopener noreferrer">Instagram</a
      >
      <a
        href="https://linkedin.com/in/alharkan"
        target="_blank"
        rel="noopener noreferrer">LinkedIn</a
      >
      <a
        href="https://github.com/alharkan7"
        target="_blank"
        rel="noopener noreferrer">GitHub</a
      >
      <a
        href="mailto:alharkan7@gmail.com"
        target="_blank"
        rel="noopener noreferrer">Email</a
      >
    </div>
  </div>

  <div class="dropdown-container">
    <a
      class={current === "archive" ? "selected" : ""}
      data-dropdown-toggle
      class="dropdown-button">Archive</a
    >
    <div class="dropdown-content">
      <a href="/threads">Threads</a>
      <a href="/shorts">Shorts</a>
      <a href="/stories">Stories</a>
      <a href="/works">Works</a>
      <a href="https://www.youtube.com/@alhrkn/playlist">YouTube</a>
    </div>
  </div>
</nav>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const dropdownToggles = document.querySelectorAll("[data-dropdown-toggle]");
    let activeDropdown: Element | null = null;

    dropdownToggles.forEach((toggle) => {
      toggle.addEventListener("click", (e) => {
        e.preventDefault();
        const container = (e.currentTarget as Element).closest(
          ".dropdown-container",
        );
        if (!container) return;

        const dropdownContent = container.querySelector(".dropdown-content");
        if (!dropdownContent) return;

        // Close previously opened dropdown if clicking a different one
        if (activeDropdown && activeDropdown !== dropdownContent) {
          activeDropdown.classList.remove("show");
        }

        // Toggle current dropdown
        dropdownContent.classList.toggle("show");
        activeDropdown = dropdownContent;
      });
    });

    // Close dropdown when clicking outside
    document.addEventListener("click", (e) => {
      const target = e.target as Element;
      if (!target.closest(".dropdown-container")) {
        if (activeDropdown) {
          activeDropdown.classList.remove("show");
          activeDropdown = null;
        }
      }
    });
  });
</script>

<div class="theme-toggle-container">
  <ThemeToggleButton client:load />
</div>
