---
import { ViewTransitions } from 'astro:transitions'
import '../styles/fonts.css'
import '../styles/global.css'

export interface Props {
  title: string
  description: string
  permalink: string
  image?: string
  type?: 'website' | 'article'
  publishDate?: string
}

const { 
  title, 
  description, 
  permalink,
  image,
  type = 'website',
  publishDate
} = Astro.props

// Ensure the permalink is absolute
const canonicalURL = new URL(permalink, Astro.site).href
// Use provided image or fallback to default social image
const socialImageURL = image 
  ? new URL(image, Astro.site).href 
  : new URL('assets/social.png', Astro.site).href
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width" />
<link rel="icon" type="image/x-icon" href="/favicon.ico" />
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />
{publishDate && <meta name="date" content={publishDate} />}

<!-- Open Graph / Facebook -->
<meta property="og:type" content={type} />
<meta property="og:url" content={canonicalURL} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={socialImageURL} />
{publishDate && <meta property="article:published_time" content={new Date(publishDate).toISOString()} />}

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={canonicalURL} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={socialImageURL} />

<ViewTransitions />

<!-- This is intentionally inlined to avoid FOUC -->
<script is:inline>
  const root = document.documentElement
  const theme = localStorage.getItem('theme')
  if (
    theme === 'dark' ||
    (!theme && window.matchMedia('(prefers-color-scheme: dark)').matches)
  ) {
    root.classList.add('theme-dark')
  } else {
    root.classList.remove('theme-dark')
  }
</script>

<!-- Twitter Widget Script -->
<script is:inline>
  window.twttr = (function(d, s, id) {
    var js, fjs = d.getElementsByTagName(s)[0],
      t = window.twttr || {};
    if (d.getElementById(id)) return t;
    js = d.createElement(s);
    js.id = id;
    js.src = "https://platform.twitter.com/widgets.js";
    fjs.parentNode.insertBefore(js, fjs);

    t._e = [];
    t.ready = function(f) {
      t._e.push(f);
    };

    return t;
  }(document, "script", "twitter-wjs"));

  // Function to load Twitter widgets
  function loadTwitterWidgets() {
    if (window.twttr && window.twttr.widgets) {
      window.twttr.widgets.load();
    }
  }

  // Load on initial page load
  document.addEventListener("DOMContentLoaded", loadTwitterWidgets);
  
  // Load on Astro page transitions
  document.addEventListener("astro:page-load", loadTwitterWidgets);

  // Load when Twitter script is ready
  window.twttr.ready(loadTwitterWidgets);
</script>

<!-- Mermaid Script -->
<script type="module">
  import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';
  
  // Initialize Mermaid
  mermaid.initialize({
    startOnLoad: true,
    theme: 'default',
    themeVariables: {
      primaryColor: '#ff6b6b',
      primaryTextColor: '#333',
      primaryBorderColor: '#ff6b6b',
      lineColor: '#666',
      secondaryColor: '#f9f9f9',
      tertiaryColor: '#fff'
    }
  });
  
  // Function to render Mermaid diagrams
  function renderMermaidDiagrams() {
    // Try multiple selectors to catch different MDX rendering patterns
    const selectors = [
      'pre code.language-mermaid',
      'code.language-mermaid', 
      'pre[class*="language-mermaid"]',
      'code[class*="language-mermaid"]',
      'pre:has(code.language-mermaid)',
      '.astro-code.language-mermaid'
    ];
    
    let mermaidElements = [];
    selectors.forEach(selector => {
      try {
        const elements = document.querySelectorAll(selector);
        mermaidElements = [...mermaidElements, ...elements];
      } catch (e) {
        // Skip selectors that aren't supported
      }
    });
    
    // Also check for any pre elements containing "graph TB" or "graph TD"
    const preElements = document.querySelectorAll('pre');
    preElements.forEach(pre => {
      const text = pre.textContent || pre.innerText;
      if (text.includes('graph TB') || text.includes('graph TD') || text.includes('flowchart')) {
        mermaidElements.push(pre);
      }
    });
    
    console.log('Found mermaid elements:', mermaidElements.length);
    
    mermaidElements.forEach((element, index) => {
      // Skip if already processed
      if (element.classList.contains('mermaid-processed')) return;
      
      const mermaidCode = element.textContent || element.innerText;
      console.log('Processing mermaid code:', mermaidCode.substring(0, 50) + '...');
      
      const mermaidId = `mermaid-${index}-${Date.now()}`;
      
      // Create a div to hold the rendered diagram
      const mermaidDiv = document.createElement('div');
      mermaidDiv.id = mermaidId;
      mermaidDiv.className = 'mermaid';
      mermaidDiv.textContent = mermaidCode.trim();
      
      // Replace the code block with the mermaid div
      const parent = element.closest('pre') || element;
      parent.parentNode.replaceChild(mermaidDiv, parent);
      
      // Mark as processed
      mermaidDiv.classList.add('mermaid-processed');
    });
    
    // Re-run mermaid on the new elements
    if (mermaidElements.length > 0) {
      mermaid.run();
    }
  }
  
  // Render on initial load
  document.addEventListener('DOMContentLoaded', renderMermaidDiagrams);
  
  // Render on Astro page transitions
  document.addEventListener('astro:page-load', renderMermaidDiagrams);
</script>